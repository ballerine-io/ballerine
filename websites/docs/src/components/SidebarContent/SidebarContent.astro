---
import { removeSubpageSegment } from '../../utils/remove-subpage-segment/remove-subpage-segment';
import { getLanguageFromURL } from '../../languages';
import type { ETab } from '../../types';

export interface Props {
  type: ETab;
  defaultActiveTab: ETab;
  sidebarSections: Array<{
    group: string;
    sections: Array<{ text: string; link: string; external?: boolean }>;
  }>;
  currentPageMatch: string;
}

const { type, defaultActiveTab, sidebarSections, currentPageMatch } =
  Astro.props as Props;
const lang = getLanguageFromURL(Astro.url.pathname);
---

{
  sidebarSections.map(({ sections, group }) => (
    <li class:list={[`nav-group`, type, defaultActiveTab === type && `active`]}>
      <details open>
        <summary class='nav-group-title'>
          <h2>
            {group}
            <svg
              xmlns='http://www.w3.org/2000/svg'
              viewBox='0 1 16 16'
              width='16'
              height='16'
              aria-hidden='true'
            >
              <path
                fill-rule='evenodd'
                d='M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z'
              />
            </svg>
          </h2>
        </summary>
        <ul>
          {sections.map(({ text, link, external }) => (
            <li class='nav-link'>
              <a
                target={external ? `_blank` : undefined}
                href={
                  external
                    ? link
                    : `${Astro.site?.pathname}${lang}/${type}/${link}/`
                }
                aria-current={`${
                  currentPageMatch.endsWith(link) ? `page` : `false`
                }`}
                data-current-parent={`${
                  removeSubpageSegment(currentPageMatch).endsWith(
                    removeSubpageSegment(link),
                  )
                    ? `true`
                    : `false`
                }`}
              >
                <Fragment set:html={text} />
              </a>
            </li>
          ))}
        </ul>
      </details>
    </li>
  ))
}

<style>
  .nav-group {
    margin-bottom: 1rem;
  }
  .nav-group .placeholder {
    opacity: 0.6;
    text-align: center;
    display: block;
  }
  @media (max-width: 50em) {
    .sm-hidden {
      display: none !important;
    }
  }
  @media (min-width: 50em) {
    .nav-group {
      display: none;
      margin-bottom: 1.75rem;
    }
  }
  .nav-group.active {
    display: block;
  }
  .nav-group-title {
    font-size: 1em;
    font-weight: 600;
    padding: 0.3rem 2rem;
  }

  .nav-link a {
    margin: 1px;
    padding: 0.3rem 2rem;
    font: inherit;
    color: hsla(var(--color-gray-40), 1);
    text-decoration: none;
    display: block;
  }

  .nav-link a:hover,
  .nav-link a:focus {
    background-color: var(--theme-bg-hover);
  }

  .nav-link a[aria-current='page'],
  .nav-link a[data-current-parent='true'] {
    color: var(--theme-text);
    background-color: var(--theme-bg-accent);
    font-weight: 500;
    /* Indicates the current page for forced colors users in older browsers */
    outline: 1px solid transparent;
  }

  .nav-link a[aria-current='page']:focus,
  .nav-link a[data-current-parent='true']:focus {
    outline: 2px solid;
  }

  @media (forced-colors: active) {
    .nav-link a[aria-current='page'],
    .nav-link a[data-current-parent='true'] {
      border: 1px solid LinkText;
    }
  }

  @media (min-width: 50em) {
    .nav-group-title,
    .nav-link a {
      padding: 0.2rem 1rem;
    }
  }

  :global(:root.theme-dark) .nav-link a[aria-current='page'],
  :global(:root.theme-dark) .nav-link a[data-current-parent='true'] {
    color: hsla(var(--color-base-white), 100%, 1);
  }

  .fallback {
    font-size: 0.75em;
    line-height: 1;
    font-weight: bold;
    color: var(--theme-text-light);
  }

  details > summary {
    list-style: none;
  }

  details > summary::marker,
  details > summary::-webkit-details-marker {
    display: none;
  }

  details[open] > summary svg {
    transform: rotate(90deg);
  }

  summary {
    cursor: pointer;
  }

  summary h2 {
    all: inherit;
    margin: 0;
    padding: 0;
  }

  svg {
    transform: rotate(0);
    transition: 0.15s transform ease;
    vertical-align: middle;
  }

  :global([dir='rtl']) svg {
    transform: rotate(180deg);
  }

  svg path {
    fill: currentColor;
  }
</style>
