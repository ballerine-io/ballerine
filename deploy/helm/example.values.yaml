## Postgres params
postgresql:
  image:
    repository: sibedge/postgres-plv8
    tag: 15.3-3.1.7
  enabled: true
  auth:
    username: admin
    password: admin
    postgresPassword: admin
    database: postgres
  # Local dev purpose
  persistence:
    existingClaim: postgresql-pv-claim
  volumePermissions:
    enabled: true

backoffice:
  enabled: true
  replicas: 1
  strategyType: RollingUpdate
  updateStrategy:
    maxSurge: 1
    maxUnavailable: '0'
  nameOverride: backoffice
  service:
    port: 80
    type: ClusterIP
    protocol: TCP
  image:
    registry: ghcr.io
    repository: 'ballerine-io/backoffice'
    pullPolicy: Always
    pullSecrets: ""
    tag: "dev"
  ingress:
    enabled: true
    className: "nginx"
    pathtype: Prefix
    annotations:
      kubernetes.io/ingress.class: nginx
      ingress.annotations.service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "<your aws acm arn>"
      # acme.cert-manager.io/http01-edit-in-place: "true"
      # cert-manager.io/common-name: backoffice.ballerine.io
      # cert-manager.io/cluster-issuer: letsencrypt-staging
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/limit-rps: "15"
    hosts:
      - host: backoffice.dev.eu.ballerine.app
        paths:
          - path: /
    tls: false
      # - secretName: letsencrypt-staging
      #   hosts:
      #     - backoffice.ballerine.io
    applicationConfig:
      VITE_API_URL: http://localhost:3000/api/v1/internal
      VITE_API_KEY: secret
      VITE_AUTH_ENABLED: true
      VITE_MOCK_SERVER: false
      VITE_POLLING_INTERVAL: 10
      VITE_ASSIGNMENT_POLLING_INTERVAL: 5
      VITE_FETCH_SIGNED_URL: false

kybapp:
  enabled: true
  replicas: 1
  strategyType: RollingUpdate
  updateStrategy:
    maxSurge: 1
    maxUnavailable: "0"
  nameOverride: kybapp
  service:
    port: 80
    type: ClusterIP
    protocol: TCP
  image:
    registry: ghcr.io
    repository: "ballerine-io/kyb-app"
    pullPolicy: Always
    pullSecrets: ""
    tag: "dev"
  ingress:
    enabled: true
    className: "nginx"
    pathtype: Prefix
    annotations:
      kubernetes.io/ingress.class: nginx
      ingress.annotations.service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "<your aws acm arn>"
      # acme.cert-manager.io/http01-edit-in-place: "true"
      # cert-manager.io/cluster-issuer: letsencrypt-staging
      # cert-manager.io/common-name: workflowdashboard.ballerine.io
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/limit-rps: "15"
    hosts:
      - host: kyb.dev.eu.ballerine.app
        paths:
          - path: /
    tls: {}
      # - secretName: letsencrypt-staging
      #   hosts:
      #     - headlessexample.ballerine.io
    applicationConfig:
      VITE_API_URL: http://localhost:3000/api/v1/internal
      VITE_KYB_DEFINITION_ID: "kyb_parent_kyc_session_example"
      VITE_API_KEY: secret
      VITE_ENVIRONMENT_NAME: local
      VITE_DEFAULT_EXAMPLE_TOKEN: 12345678-1234-1234-1234-123456789012
      VITE_SENTRY_AUTH_TOKEN: 5
      VITE_SENTRY_DSN: false

workflowsdashboard:
  enabled: true
  replicas: 1
  strategyType: RollingUpdate
  updateStrategy:
    maxSurge: 1
    maxUnavailable: '0'
  nameOverride: workflowsdashboard
  service:
    port: 80
    type: ClusterIP
    protocol: TCP
  image:
    registry: ghcr.io
    repository: 'ballerine-io/workflows-dashboard'
    pullPolicy: Always
    pullSecrets: ""
    tag: "dev"
  ingress:
    enabled: true
    className: "nginx"
    pathtype: Prefix
    annotations:
      kubernetes.io/ingress.class: nginx
      ingress.annotations.service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "<your aws acm arn>"
      # acme.cert-manager.io/http01-edit-in-place: "true"
      # cert-manager.io/cluster-issuer: letsencrypt-staging
      # cert-manager.io/common-name: workflowdashboard.ballerine.io
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/limit-rps: "15"
    hosts:
      - host: workflowdashboard.dev.eu.ballerine.app
        paths:
          - path: /
    tls: {}
      # - secretName: letsencrypt-staging
      #   hosts:
      #     - workflowdashboard.ballerine.io
    applicationConfig:
      VITE_API_URL: http://localhost:3000/api/v1/internal
      MODE: development
      VITE_IMAGE_LOGO_URL: ""

websocketService:
  enabled: true
  replicas: 1
  strategyType: RollingUpdate
  updateStrategy:
    maxSurge: 1
    maxUnavailable: '0'
  nameOverride: websocketservice
  service:
    port: 3500
    type: ClusterIP
    protocol: TCP
  image:
    registry: ghcr.io
    repository: 'ballerine-io/websocket-service'
    pullPolicy: Always
    tag: "dev"
  ingress:
    enabled: true
    className: "nginx"
    pathtype: Prefix
    annotations:
      kubernetes.io/ingress.class: nginx
      ingress.annotations.service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "<your aws acm arn>"
      # acme.cert-manager.io/http01-edit-in-place: "true"
      # cert-manager.io/cluster-issuer: letsencrypt-staging
      # cert-manager.io/common-name: websocket.ballerine.io
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/limit-rps: "15"
    tls : {}
    hosts:
      - host: websocket.dev.eu.ballerine.app
        paths:
          - path: /
  applicationConfig:
    VITE_API_URL: http://localhost:3000/api/v1/internal
    PORT: 3500
    NODE_ENV: development
    COMPOSE_PROJECT_NAME: ballerine-x

workflowService:
  enabled: true
  replicas: 1
  strategyType: RollingUpdate
  updateStrategy:
    maxSurge: 1
    maxUnavailable: '0'
  nameOverride: workflowservice
  migration: true
  service:
    port: 3000
    type: ClusterIP
    protocol: TCP
  image:
    registry: ghcr.io
    repository: 'ballerine-io/workflows-service'
    pullPolicy: Always
    pullSecrets: ""
    tag: "dev"
  ingress:
    enabled: true
    className: "nginx"
    pathtype: Prefix
    annotations:
      kubernetes.io/ingress.class: nginx
      ingress.annotations.service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "<your aws acm arn>"
      # acme.cert-manager.io/http01-edit-in-place: "true"
      # cert-manager.io/cluster-issuer: letsencrypt-staging
      # cert-manager.io/common-name: workflowsvc.ballerine.io
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/limit-rps: "15"
    hosts:
      - host: workflowsvc.dev.eu.ballerine.app
        paths:
          - path: /
    tls: {}
      # - secretName: letsencrypt-staging
      #   hosts:
      #     - workflowsvc.ballerine.io
  applicationConfig:
    BCRYPT_SALT: 10
    COMPOSE_PROJECT_NAME: ballerine-x
    PORT: 3000
    DB_USER: admin
    DB_PASSWORD: admin
    DB_PORT: 5432
    DB_URL: postgres://admin:admin@localhost:5432/postgres
    SESSION_SECRET: iGdnj4A0YOhj8dHJK7IWSvQKEZsG7P70FFehuddhFPjtg/bSkzFejYILk4Xue6Ilx9y3IAwzR8pV1gb4
    SESSION_EXPIRATION_IN_MINUTES: 60
    WORKFLOW_DASHBOARD_CORS_ORIGIN: http://localhost:5200
    BACKOFFICE_CORS_ORIGIN: http://localhost:5137
    KYB_EXAMPLE_CORS_ORIGIN: http://localhost:5201
    KYC_EXAMPLE_CORS_ORIGIN: http://localhost:5202
    API_KEY: secret
    NODE_ENV: development
    ENVIRONMENT_NAME: local
    SENTRY_DSN: ""
    EMAIL_API_TOKEN: ""
    EMAIL_API_URL: ""
    AWS_S3_BUCKET_NAME: ""
    AWS_S3_BUCKET_KEY: ""
    AWS_S3_BUCKET_SECRET: ""
    AWS_REGION: ""
    ADMIN_API_KEY: admin_secret
    MAIL_ADAPTER: log
    UNIFIED_API_URL: http://localhost:3001
    UNIFIED_API_TOKEN: secret-key
    UNIFIED_API_SHARED_SECRET: shared-secret-key
    SALESFORCE_API_VERSION: 58.0
    SALESFORCE_CONSUMER_KEY: ""
    SALESFORCE_CONSUMER_SECRET: ""
    APP_API_URL: http://localhost:3000
    COLLECTION_FLOW_URL: http://localhost:5201
    WEB_UI_SDK_URL: http://localhost:5202
    HASHING_KEY_SECRET_BASE64: JDJiJDEwJDNFeWtwWEs4QkdiczlRaWFwLkM4Vk8=
    NOTION_API_KEY: secret
