datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  Active
  Blocked
  Deleted
}

model User {
  id        String     @id @default(cuid())
  firstName String
  lastName  String
  email     String     @unique
  phone     String?    @unique
  password  String
  avatarUrl String?
  roles     Json
  status    UserStatus @default(Active)

  userToProjects UserToProject[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastActiveAt        DateTime?
  workflowRuntimeData WorkflowRuntimeData[]
}

model Entities {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String  @unique
  phone     String? @unique
  password  String
  roles     Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApprovalState {
  APPROVED
  REJECTED
  PROCESSING
  NEW
}

model EndUser {
  id              String  @id @default(cuid())
  isContactPerson Boolean @default(false)

  correlationId String? @unique @db.VarChar

  endUserType   String?       @default("individual") // Add userType: can be 'EndUser', 'CompanyContact', 'Stakeholder'
  approvalState ApprovalState @default(NEW)
  stateReason   String?       @db.VarChar

  firstName      String    @db.VarChar
  lastName       String    @db.VarChar
  email          String?   @db.Text
  phone          String?   @db.VarChar
  country        String?   @db.VarChar
  dateOfBirth    DateTime?
  avatarUrl      String?
  nationalId     String?   @db.VarChar
  additionalInfo Json?

  workflowRuntimeData WorkflowRuntimeData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businesses           Business[]
  endUsersOnBusinesses EndUsersOnBusinesses[]

  projectId                String
  project                  Project                    @relation(fields: [projectId], references: [id])
  WorkflowRuntimeDataToken WorkflowRuntimeDataToken[]
  TransactionRecord        TransactionRecord[]
  Alert           Alert[]

  @@index([endUserType])
  @@index([approvalState])
  @@index([createdAt])
  @@index([projectId])
}

model EndUsersOnBusinesses {
  endUser    EndUser  @relation(fields: [endUserId], references: [id])
  endUserId  String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  @@id([endUserId, businessId])
  @@index([businessId])
  @@index([endUserId])
}

model Business {
  id            String  @id @default(cuid()) // Unique identifier for the business entity
  correlationId String? @unique @db.VarChar

  businessType            String?       @default("default")
  createdAt               DateTime      @default(now()) // Timestamp for when the business entity was created
  updatedAt               DateTime      @updatedAt // Timestamp for when the business entity was last updated
  companyName             String // Official registered name of the business entity
  registrationNumber      String? // Unique registration number assigned by the relevant authorities
  legalForm               String? // Legal structure of the business entity, e.g., LLC, corporation, partnership
  country                 String?
  countryOfIncorporation  String? // Country where the business entity is incorporated
  dateOfIncorporation     DateTime? // Date when the business entity was incorporated
  address                 Json? // Registered address of the business entity
  phoneNumber             String? // Contact phone number of the business entity
  email                   String? // Contact email of the business entity
  website                 String? // Official website of the business entity
  industry                String? // Industry sector the business entity operates in
  taxIdentificationNumber String? // Unique tax identification number assigned by the tax authorities
  vatNumber               String? // Unique VAT (Value Added Tax) number for the business entity
  shareholderStructure    Json? // Information about the ownership structure, including shareholders and their ownership percentages
  numberOfEmployees       Int? // Number of employees working for the business entity
  businessPurpose         String? // Brief description of the business entity's purpose or main activities
  documents               Json? // Collection of documents required for the KYB process, e.g., registration documents, financial statements
  avatarUrl               String?
  additionalInfo          Json?
  bankInformation         Json?
  approvalState           ApprovalState @default(NEW) // Current status of the KYB process for the business entity

  workflowRuntimeData  WorkflowRuntimeData[]
  endUsers             EndUser[]
  endUsersOnBusinesses EndUsersOnBusinesses[]

  projectId         String
  project           Project             @relation(fields: [projectId], references: [id])
  TransactionRecord TransactionRecord[]
  Alert    Alert[]

  @@index([companyName])
  @@index([approvalState])
  @@index([correlationId])
  @@index([projectId])
  @@index([businessType])
}

model WorkflowDefinition {
  id              String  @id @default(cuid())
  reviewMachineId String?
  name            String
  version         Int     @default(1)

  projectId String?
  isPublic  Boolean @default(false)

  definitionType     String
  definition         Json
  contextSchema      Json?
  documentsSchema    Json?
  config             Json?
  supportedPlatforms Json?
  extensions         Json?
  variant            String @default("DEFAULT")

  backend       Json?
  persistStates Json?
  submitStates  Json?

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("SYSTEM")
  project             Project?              @relation(fields: [projectId], references: [id])
  workflowRuntimeData WorkflowRuntimeData[]
  uiDefinitions       UiDefinition[]

  @@unique([name, version, projectId, definitionType])
  @@index([projectId, name, definitionType])
}

enum WorkflowRuntimeDataStatus {
  active
  completed
  failed
}

model WorkflowRuntimeData {
  id                        String                    @id @default(cuid())
  endUser                   EndUser?                  @relation(fields: [endUserId], references: [id], onDelete: SetNull)
  endUserId                 String?
  business                  Business?                 @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId                String?
  assignee                  User?                     @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId                String?
  workflowDefinition        WorkflowDefinition        @relation(fields: [workflowDefinitionId], references: [id])
  workflowDefinitionId      String
  workflowDefinitionVersion Int
  context                   Json
  config                    Json?
  // history
  state                     String?
  tags                      Json?
  status                    WorkflowRuntimeDataStatus @default(active)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  createdBy                 String                    @default("SYSTEM")
  resolvedAt                DateTime?
  assignedAt                DateTime?
  salesforceObjectName      String?
  salesforceRecordId        String?

  parentRuntimeDataId       String?                    @map("parent_runtime_data_id")
  parentWorkflowRuntimeData WorkflowRuntimeData?       @relation("ParentChild", fields: [parentRuntimeDataId], references: [id])
  childWorkflowsRuntimeData WorkflowRuntimeData[]      @relation("ParentChild")
  WorkflowRuntimeDataToken  WorkflowRuntimeDataToken[]

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([assigneeId, status])
  @@index([endUserId, status])
  @@index([businessId, status])
  @@index([workflowDefinitionId, status])
  @@index([state])
  @@index([parentRuntimeDataId])
  @@index([projectId])
  @@index([tags(ops: JsonbPathOps)], type: Gin)
}

model File {
  id               String   @id @default(cuid())
  mimeType         String?
  userId           String
  fileNameOnDisk   String
  fileName         String?
  uri              String
  fileNameInBucket String?
  createdAt        DateTime @default(now())
  createdBy        String   @default("SYSTEM")

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

model Policy {
  id        String @id @default(cuid())
  name      String
  version   Int
  tasks     Json
  rulesSets Json
}

model Filter {
  id     String @id @default(cuid())
  name   String
  entity String
  query  Json

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("SYSTEM")

  @@unique([name, projectId]) // Ensure 'name' is unique within the scope of 'projectId'
  @@index([projectId])
}

enum CustomerStatuses {
  onboarding
  during_pilot
  active
  terminated
}

model Customer {
  id                          String           @id @default(cuid())
  name                        String           @unique
  displayName                 String
  logoImageUri                String
  faviconImageUri             String           @default("") // TODO: remove default value after data migration
  customerStatus              CustomerStatuses @default(onboarding)
  authenticationConfiguration Json?
  country                     String?
  language                    String?
  websiteUrl                  String?
  subscriptions               Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]

  @@index(name)
  @@index(customerStatus)
  @@index([authenticationConfiguration(ops: JsonbPathOps)], type: Gin)
}

model Project {
  id         String   @id @default(cuid())
  name       String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  userToProjects UserToProject[]

  filters                  Filter[]
  endUsers                 EndUser[]
  business                 Business[]
  workflowRuntimeData      WorkflowRuntimeData[]
  files                    File[]
  SalesforceIntegration    SalesforceIntegration?
  workflowDefinitions      WorkflowDefinition[]
  uiDefinitions            UiDefinition[]
  WorkflowRuntimeDataToken WorkflowRuntimeDataToken[]
  TransactionRecord        TransactionRecord[]
  AlertDefinition          AlertDefinition[]
  Alert           Alert[]

  @@unique([name, customerId])
  @@index(name)
  @@index(customerId)
}

model UserToProject {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@id([projectId, userId])
  @@index([userId])
}

model SalesforceIntegration {
  id                  String   @id @default(cuid()) @db.VarChar(500)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  projectId           String   @unique @db.VarChar(500)
  project             Project  @relation(fields: [projectId], references: [id])
  accessToken         String   @db.VarChar(500)
  accessTokenIssuedAt DateTime
  refreshToken        String   @db.VarChar(500)
  instanceUrl         String   @db.VarChar(500)
  userId              String   @db.VarChar(500)
  organizationId      String   @db.VarChar(500)
  idUrl               String   @db.VarChar(500)
}

enum UiDefinitionContext {
  back_office
  collection_flow
}

model UiDefinition {
  id                   String              @id @default(cuid())
  workflowDefinitionId String
  uiContext            UiDefinitionContext

  page  Int?
  state String?

  definition    Json? // Frontend UI xstate definition
  uiSchema      Json // JSON schmea of how to render UI
  schemaOptions Json? // Document Schemas, rejectionReasons: {}, documenTypes: {}, documenCateogries: {}
  uiOptions     Json? // how the view will look, overall

  projectId          String
  project            Project            @relation(fields: [projectId], references: [id])
  workflowDefinition WorkflowDefinition @relation(fields: [workflowDefinitionId], references: [id])
}

model WorkflowRuntimeDataToken {
  id                    String              @id @default(cuid())
  token                 String              @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflowRuntimeDataId String
  workflowRuntimeData   WorkflowRuntimeData @relation(fields: [workflowRuntimeDataId], references: [id])
  endUserId             String
  endUser               EndUser             @relation(fields: [endUserId], references: [id])
  projectId             String
  project               Project             @relation(fields: [projectId], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  expiresAt             DateTime
  deletedAt             DateTime?
}

enum DataVersionStatus {
  in_progress
  completed
  failed
}

model DataMigrationVersion {
  id            String            @id @default(cuid())
  version       String
  migratedAt    DateTime          @default(now())
  status        DataVersionStatus @default(completed)
  failureReason String?

  @@index([migratedAt])
  @@index([status, version])
}

enum TransactionRecordType {
  Deposit
  Withdrawal
  Transfer
  Payment
  Refund
  Chargeback
}

enum ReviewStatus {
  Pending
  Reviewed
  Flagged
  Cleared
}

enum VerificationStatus {
  Unverified
  Verified
  Pending
}

enum TransactionRecordStatus {
  New
  Pending
  Active
  Completed
  Rejected
  Cancelled
  Failed
}

model TransactionRecord {
  id                       String                  @id @default(cuid())
  transactionCorrelationId String                  @unique @db.VarChar
  transactionDate          DateTime
  transactionAmount        Float // Amount of the transaction
  transactionCurrency      String // Currency of the transaction
  transactionDescription   String? // Description of the transaction
  transactionCategory      String? // Category of the transaction
  transactionType          TransactionRecordType? // Enum for transaction type
  transactionStatus        TransactionRecordStatus @default(Completed)
  transactionStatusReason  String? // Reason for the transaction status

  senderAccountId               String? // Account ID of the sender
  senderName                    String? // Name of the sender
  senderCorrelationId           String?
  senderCountry                 String? // Country of the sender
  senderIpAddress               String? // IP address of the transaction initiator
  senderGeoLocation             String? // Geolocation of the transaction initiator
  senderUserAgent               String? // User agent of the device used for the transaction
  senderPEPStatus               String? // Indicator if the transaction involves a politically exposed person
  senderSanctionListMatchStatus String? // Indicator if the transaction involves an entity on the sanction list
  senderVerificationStatus      VerificationStatus? // Enum for verification status

  recipientAccountId               String? // Account ID of the recipient
  recipientName                    String? // Name of the recipient
  recipientCorrelationId           String? // Name of the recipient
  recipientCountry                 String? // Country of the recipient
  recipientVerificationStatus      VerificationStatus? // Enum for verification status
  recipientSanctionListMatchStatus String? // Indicator if the transaction involves an entity on the sanction list
  recipientPEPStatus               String? // Indicator if the transaction involves a politically exposed person

  paymentMethod    String? // Payment method used for the transaction
  paymentType      String? // Payment type used for the transaction
  paymentChannel   String? // Payment channel used for the transaction
  paymentIssuer    String? // Payment issuer used for the transaction
  paymentGateway   String? // Payment gateway used for the transaction
  paymentAcquirer  String? // Payment acquirer used for the transaction
  paymentProcessor String? // Payment processor used for the transaction

  cardFingerprint   String?
  cardIssuedCountry String?
  completed3ds      Boolean?
  cardType          String?
  cardIssuer        String?
  cardBrand         String?

  cardExpiryMonth String?
  cardExpiryYear  String?
  cardHolderName  String?
  cardTokenized   String?

  tags             Json?
  reviewStatus     String?
  reviewerComments String?
  auditTrail       Json?

  unusualActivityFlags Json? // Flags indicating unusual activity in the transaction
  riskScore            Float? // Risk score assigned to the transaction
  regulatoryAuthority  String? // Regulatory authority overseeing the business involved

  additionalInfo Json? // Additional information related to the transaction

  // Fields for merchant transactions
  productName        String?
  productDescription String?
  productPrice       Float?
  productId          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Nullable relations to allow association with either, both, or none
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id])
  endUserId  String?
  endUser    EndUser?  @relation(fields: [endUserId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([businessId])
  @@index([endUserId])
  @@index([transactionType])
  @@index([transactionDate])
  @@index([reviewStatus])
  @@index([projectId])
  @@index([transactionCorrelationId])
}

enum AlertState {
  Triggered
  Resolved
  Acknowledged
  Dismissed
  Escalated
  UnderReview
}

enum AlertStatus {
  New
  Pending
  Completed
}

enum AlertType {
  HighRiskTransaction
  DormantAccountActivity
  UnusualPattern
  // Add other alert types as needed
}

// ... (Other models and enums)

model AlertDefinition {
  id          String @id @default(cuid())
  projectId   String
  name        String
  description String
  rulesetId   Int // Set of rules reference
  ruleId      Int // Specific rule within the ruleset

  inlineRule Json? // JSON format for rule definitions
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  String
  modifiedBy String
  enabled    Boolean    @default(true)
  type       AlertType? // Type of the alert

  dedupeStrategies Json // Deduplication strategies
  config           Json // Additional configurations

  tags           String[] // Tags for the alert
  additionalInfo Json // Additional information

  workflowDefinitionId String? // Reference to a workflow definition

  project Project @relation(fields: [projectId], references: [id])
  alert   Alert[]

  @@index([projectId])
}

model Alert {
  id                String      @id @default(cuid())
  businessId        String? // Reference to a Business
  endUserId         String? // Reference to an EndUser
  projectId         String
  dataTimestamp     DateTime
  state             AlertState // Using AlertState enum
  status            AlertStatus // Using AlertStatus enum
  tags              String[] // Tags for the alert
  alertDefinitionId String

  executionDetails Json // Execution details

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  handledBy             String? // User who handled the alert
  workflowRuntimeDataId String?

  project         Project         @relation(fields: [projectId], references: [id])
  business        Business?       @relation(fields: [businessId], references: [id])
  endUser         EndUser?        @relation(fields: [endUserId], references: [id])
  alertDefinition AlertDefinition @relation(fields: [alertDefinitionId], references: [id])

  @@index([businessId])
  @@index([endUserId])
  @@index([projectId])
  @@index([alertDefinitionId])
}

