datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String  @unique
  phone     String? @unique
  password  String
  roles     Json

  userToProjects UserToProject[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastActiveAt        DateTime?
  workflowRuntimeData WorkflowRuntimeData[]
}

model Entities {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String  @unique
  phone     String? @unique
  password  String
  roles     Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApprovalState {
  APPROVED
  REJECTED
  PROCESSING
  NEW
}

model EndUser {
  id              String  @id @default(cuid())
  isContactPerson Boolean @default(false)

  correlationId String? @unique @db.VarChar

  endUserType   String?       @default("individual") // Add userType: can be 'EndUser', 'CompanyContact', 'Stakeholder'
  approvalState ApprovalState @default(NEW)
  stateReason   String?       @db.VarChar

  firstName      String    @db.VarChar
  lastName       String    @db.VarChar
  email          String?   @db.Text
  phone          String?   @db.VarChar
  country        String?   @db.VarChar
  dateOfBirth    DateTime?
  avatarUrl      String?
  nationalId     String?   @db.VarChar
  additionalInfo Json?

  workflowRuntimeData WorkflowRuntimeData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businesses           Business[]
  endUsersOnBusinesses EndUsersOnBusinesses[]

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([endUserType])
  @@index([approvalState])
  @@index([createdAt])
  @@index([projectId])
}

model EndUsersOnBusinesses {
  endUser    EndUser  @relation(fields: [endUserId], references: [id])
  endUserId  String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  @@id([endUserId, businessId])
  @@index([businessId])
  @@index([endUserId])
}

model Business {
  id            String  @id @default(cuid()) // Unique identifier for the business entity
  correlationId String? @unique @db.VarChar

  businessType            String?       @default("default")
  createdAt               DateTime      @default(now()) // Timestamp for when the business entity was created
  updatedAt               DateTime      @updatedAt // Timestamp for when the business entity was last updated
  companyName             String // Official registered name of the business entity
  registrationNumber      String? // Unique registration number assigned by the relevant authorities
  legalForm               String? // Legal structure of the business entity, e.g., LLC, corporation, partnership
  country                 String?
  countryOfIncorporation  String? // Country where the business entity is incorporated
  dateOfIncorporation     DateTime? // Date when the business entity was incorporated
  address                 Json? // Registered address of the business entity
  phoneNumber             String? // Contact phone number of the business entity
  email                   String? // Contact email of the business entity
  website                 String? // Official website of the business entity
  industry                String? // Industry sector the business entity operates in
  taxIdentificationNumber String? // Unique tax identification number assigned by the tax authorities
  vatNumber               String? // Unique VAT (Value Added Tax) number for the business entity
  shareholderStructure    Json? // Information about the ownership structure, including shareholders and their ownership percentages
  numberOfEmployees       Int? // Number of employees working for the business entity
  businessPurpose         String? // Brief description of the business entity's purpose or main activities
  documents               Json? // Collection of documents required for the KYB process, e.g., registration documents, financial statements
  avatarUrl               String?
  additionalInfo          Json?
  bankInformation         Json?
  approvalState           ApprovalState @default(NEW) // Current status of the KYB process for the business entity

  workflowRuntimeData  WorkflowRuntimeData[]
  endUsers             EndUser[]
  endUsersOnBusinesses EndUsersOnBusinesses[]

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([companyName])
  @@index([approvalState])
  @@index([correlationId])
  @@index([projectId])
  @@index([businessType])
}

model WorkflowDefinition {
  id              String  @id @default(cuid())
  reviewMachineId String?
  name            String
  version         Int     @default(1)

  definitionType     String
  definition         Json
  contextSchema      Json?
  config             Json?
  supportedPlatforms Json?
  extensions         Json?

  backend       Json?
  persistStates Json?
  submitStates  Json?

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String                @default("SYSTEM")
  workflowRuntimeData WorkflowRuntimeData[]
}

enum WorkflowRuntimeDataStatus {
  active
  completed
  failed
}

model WorkflowRuntimeData {
  id                        String                    @id @default(cuid())
  endUser                   EndUser?                  @relation(fields: [endUserId], references: [id], onDelete: SetNull)
  endUserId                 String?
  business                  Business?                 @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId                String?
  assignee                  User?                     @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId                String?
  workflowDefinition        WorkflowDefinition        @relation(fields: [workflowDefinitionId], references: [id])
  workflowDefinitionId      String
  workflowDefinitionVersion Int
  context                   Json
  config                    Json?
  // history
  state                     String?
  tags                      Json?
  status                    WorkflowRuntimeDataStatus @default(active)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  createdBy                 String                    @default("SYSTEM")
  resolvedAt                DateTime?
  assignedAt                DateTime?

  parentRuntimeDataId       String?               @map("parent_runtime_data_id")
  parentWorkflowRuntimeData WorkflowRuntimeData?  @relation("ParentChild", fields: [parentRuntimeDataId], references: [id])
  childWorkflowsRuntimeData WorkflowRuntimeData[] @relation("ParentChild")

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([assigneeId, status])
  @@index([endUserId, status])
  @@index([businessId, status])
  @@index([workflowDefinitionId, status])
  @@index([state])
  @@index([parentRuntimeDataId])
  @@index([projectId])
  @@index([tags(ops: JsonbPathOps)], type: Gin)
}

model File {
  id               String   @id @default(cuid())
  userId           String
  fileNameOnDisk   String
  uri              String
  fileNameInBucket String?
  createdAt        DateTime @default(now())
  createdBy        String   @default("SYSTEM")

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

model Policy {
  id        String @id @default(cuid())
  name      String
  version   Int
  tasks     Json
  rulesSets Json
}

model Filter {
  id     String @id @default(cuid())
  name   String
  entity String
  query  Json

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("SYSTEM")

  @@unique([name, projectId]) // Ensure 'name' is unique within the scope of 'projectId'
  @@index([projectId])
}

enum CustomerStatuses {
  onboarding
  during_pilot
  active
  terminated
}

model Customer {
  id                          String           @id @default(cuid())
  name                        String           @unique
  displayName                 String
  logoImageUri                String
  customerStatus              CustomerStatuses @default(onboarding)
  authenticationConfiguration Json?
  country                     String?
  language                    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]

  @@index(name)
  @@index(customerStatus)
  @@index([authenticationConfiguration(ops: JsonbPathOps)], type: Gin)
}

model Project {
  id         String   @id @default(cuid())
  name       String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  userToProjects UserToProject[]

  filters             Filter[]
  endUsers            EndUser[]
  business            Business[]
  workflowRuntimeData WorkflowRuntimeData[]
  files               File[]

  @@unique([name, customerId])
  @@index(name)
  @@index(customerId)
}

model UserToProject {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@id([projectId, userId])
  @@index([userId])
}
