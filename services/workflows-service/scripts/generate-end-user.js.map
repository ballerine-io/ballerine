{"version":3,"file":"generate-end-user.js","sourceRoot":"","sources":["generate-end-user.ts"],"names":[],"mappings":"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","sourcesContent":["import { faker } from '@faker-js/faker';\nimport { Prisma } from '@prisma/client';\nimport { StateTag } from '@ballerine/common';\n\nexport const assignedTo = faker.image.avatar();\nexport const endUserIds = [\n  'ckkt3qnv40001qxtt7nmj9r2r',\n  'ckkt3r0v40002qxtt8sxk7fvi',\n  'ckkt3rhxr0003qxtt5x6h5j1w',\n  'ckkt3rv4z0004qxtte4vz9e9e',\n  'ckkt3s3ha0005qxttdz5yxg7p',\n  'ckkt3sc1n0006qxtt9e9u7y6z',\n  'ckkt3sjz40007qxtt3nqj80jt',\n  'ckkt3st0r0008qxtt5rxj0wgg',\n  'ckkt3swf20009qxttgx0p6x60',\n  'ckkt3t2bw000aqxtt0hj4pw4c',\n  'ckkt3t2bw000aqxtt0hj4pw4d',\n  'ckkt3t2bw000aqxtt0hj4pw4e',\n  'ckkt3t2bw000aqxtt0hj4pw4f',\n  'ckkt3t2bw000aqxtt0hj4pw4g',\n  'ckkt3t2bw000aqxtt0hj4pw4h',\n  'ckkt3t2bw000aqxtt0hj4pw4i',\n];\n\nexport const businessRiskIds = [\n  'ckkt3qnv41001qxtt7nmj9r26',\n  'ckkt3r0v42002qxtt8sxk7fv9',\n  'ckkt3rhxr3003qxtt5x6h5j18',\n  'ckkt3rv4z4004qxtte4vz9e19',\n  'ckkt3s3ha5005qxttdz5yxg20',\n  'ckkt3sc1n6006qxtt9e9u7y21',\n  'ckkt3sjz70007qxtt3nqj80j22',\n  'ckkt3st0r8008qxtt5rxj0wg23',\n  'ckkt3swf90009qxttgx0p6x24',\n  'ckkt3t2bw000aqxtt0hj4pw25',\n  'ckkt3t2bw000aqxtt0hj4pw26',\n  'ckkt3t2bw000aqxtt0hj4pw27',\n  'ckkt3t2bw000aqxtt0hj4pw28',\n  'ckkt3t2bw000aqxtt0hj4pw29',\n];\nexport const businessIds = [\n  'ckkt3rv4z4004qxtte4vz9e97',\n  'ckkt3s3ha5005qxttdz5yxg76',\n  'ckkt3sc16006qxtt9e9u7y65',\n  'ckkt3sjz70007qxtt3nqj80j4',\n  'ckkt3st080008qxtt5rxj0wg3',\n  'ckkt3swf90009qxttgx0p6x62',\n  'ckkt3t2b1000aqxtt0hj4pw41',\n];\n\nexport const generateBusiness = ({\n  id,\n  companyName = faker.company.name(),\n  registrationNumber = faker.datatype.uuid(),\n  legalForm = faker.company.companySuffix(),\n  countryOfIncorporation = faker.address.country(),\n  dateOfIncorporation = faker.date.past(10),\n  address = faker.address.streetAddress(),\n  phoneNumber = faker.phone.number('+##########'),\n  email = faker.internet.email(),\n  website = faker.internet.url(),\n  industry = faker.company.bs(),\n  taxIdentificationNumber = faker.finance.account(10),\n  vatNumber = `VAT${faker.finance.account(8)}`,\n  numberOfEmployees = faker.datatype.number({ min: 1, max: 1000 }),\n  businessPurpose = faker.company.catchPhrase(),\n  shareholderStructure = [\n    { name: faker.name.fullName(), ownershipPercentage: Number(faker.finance.amount(0, 100, 2)) },\n  ],\n  documents = {\n    registrationDocument: faker.system.filePath(),\n    financialStatement: faker.system.filePath(),\n  },\n  workflow,\n  projectId,\n}: {\n  id: string;\n  companyName?: string;\n  registrationNumber?: string;\n  legalForm?: string;\n  countryOfIncorporation?: string;\n  dateOfIncorporation?: Date;\n  address?: string;\n  phoneNumber?: string;\n  email?: string;\n  website?: string;\n  industry?: string;\n  taxIdentificationNumber?: string;\n  vatNumber?: string;\n  numberOfEmployees?: number;\n  businessPurpose?: string;\n  shareholderStructure?: Array<{\n    name: string;\n    ownershipPercentage: number;\n  }>;\n  documents?: {\n    registrationDocument: string;\n    financialStatement: string;\n  };\n  workflow: {\n    runtimeId?: string;\n    workflowDefinitionId: string;\n    workflowDefinitionVersion: number;\n    context: Prisma.InputJsonValue;\n    state: string;\n  };\n  projectId: string;\n}): Prisma.BusinessCreateInput => {\n  const { runtimeId, workflowDefinitionId, workflowDefinitionVersion, context, state } = workflow;\n\n  return {\n    id,\n    companyName,\n    registrationNumber,\n    legalForm,\n    countryOfIncorporation,\n    dateOfIncorporation,\n    address,\n    phoneNumber,\n    email,\n    website,\n    industry,\n    taxIdentificationNumber,\n    vatNumber,\n    numberOfEmployees,\n    businessPurpose,\n    documents: JSON.stringify(documents),\n    shareholderStructure: JSON.stringify(shareholderStructure),\n    project: { connect: { id: projectId } },\n    approvalState: 'PROCESSING',\n    workflowRuntimeData: {\n      create: {\n        id: runtimeId,\n        workflowDefinitionVersion,\n        context,\n        workflowDefinitionId,\n        createdAt: faker.date.recent(2),\n        projectId: projectId,\n        state: state,\n        tags: [StateTag.MANUAL_REVIEW],\n      },\n    },\n  };\n};\n\nexport const generateEndUser = ({\n  id,\n  correlationId = faker.datatype.uuid(),\n  firstName = faker.name.firstName(),\n  lastName = faker.name.lastName(),\n  email = faker.internet.email(firstName, lastName),\n  phone = faker.phone.number('+##########'),\n  dateOfBirth = faker.date.past(60),\n  avatarUrl = faker.image.avatar(),\n  workflow,\n  projectId,\n}: {\n  id: string;\n  correlationId?: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  phone?: string;\n  dateOfBirth?: Date;\n  avatarUrl?: string;\n  workflow: {\n    workflowDefinitionId: string;\n    workflowDefinitionVersion: number;\n    context: Prisma.InputJsonValue;\n    parentRuntimeId?: string;\n    state: string;\n  };\n  projectId: string;\n}): Prisma.EndUserCreateInput => {\n  const { workflowDefinitionId, workflowDefinitionVersion, context, state } = workflow;\n  let res: Prisma.EndUserCreateInput = {\n    id,\n    correlationId,\n    firstName,\n    lastName,\n    approvalState: 'PROCESSING',\n    email,\n    phone,\n    dateOfBirth,\n    avatarUrl,\n  };\n  if (workflowDefinitionId) {\n    res = {\n      ...res,\n      workflowRuntimeData: {\n        create: {\n          workflowDefinitionVersion,\n          context,\n          workflowDefinitionId,\n          createdAt: faker.date.recent(2),\n          projectId: projectId,\n          parentRuntimeDataId: workflow.parentRuntimeId,\n          state: state,\n          tags: [StateTag.MANUAL_REVIEW],\n        },\n      },\n    };\n  }\n\n  res.project = { connect: { id: projectId } };\n  return res;\n};\n"]}