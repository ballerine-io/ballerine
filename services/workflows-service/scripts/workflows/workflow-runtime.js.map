{"version":3,"file":"workflow-runtime.js","sourceRoot":"","sources":["workflow-runtime.ts"],"names":[],"mappings":"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","sourcesContent":["import { faker } from '@faker-js/faker';\nimport { Prisma, PrismaClient, WorkflowRuntimeDataStatus } from '@prisma/client';\nimport { generateBusiness, generateEndUser } from '../generate-end-user';\nimport { CustomerCreateDto } from '@/customer/dtos/customer-create';\nimport { workflows } from './mock-workflows';\n\nexport type Workflow = {\n  business: {\n    id: string;\n    name: string;\n    registrationNumber: string;\n    legalForm: string;\n    countryOfIncorporation: string;\n    jurisdictionCode: string;\n    dateOfIncorporation: Date;\n    address: string;\n    addressComponents: {\n      region: string;\n      country: string;\n      locality: string;\n      postalCode: string;\n      streetAddress: string;\n    };\n    phoneNumber: string;\n    email: string;\n    website: string; // URL\n    industry: string;\n    taxIdentificationNumber: string;\n    vatNumber: string;\n    numberOfEmployees: number;\n    businessPurpose: string;\n    proofOfAddress: string; // URL\n    proofOfAddressIssuerCountry: string;\n    bankStatement: string; // URL\n    companyStructure: string; // URL\n    registrationCertificate: string; // URL\n    shareholderStructure: Array<{\n      name: string;\n      ownershipPercentage: number;\n    }>;\n    bankInformation: {\n      holder: string;\n      account: number;\n      country: string;\n      bankName: string;\n      currency: string;\n    };\n    companyActivity: {\n      model: string;\n      volumeAmount: number;\n      transactionValue: number;\n    };\n  };\n  ubos: Array<{\n    id: string;\n    nationalId: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    phoneNumber: string;\n    title: string;\n    dateOfBirth: Date;\n    avatarUrl: string; // URL\n    gender: 'M' | 'F';\n    nationality: string;\n    decision: 'approved' | 'declined' | 'resubmission_requested';\n    decisionReason: string | null;\n    withAml: boolean;\n    selfie: string; // URL\n    passport: {\n      front: string; // URL\n      back?: string; // URL\n      issuerCountryCode: string;\n    };\n  }>;\n};\n\nexport const createDemoMockData = async ({\n  prismaClient,\n  customer: { name: customerName, displayName: customerDisplayName },\n  projects,\n}: {\n  prismaClient: PrismaClient;\n  customer: CustomerCreateDto;\n  projects: Array<{ id: string }>;\n}) => {\n  for (const { id: projectId } of projects) {\n    for (const { business, ubos } of workflows()) {\n      await createMockParentWithChildWorkflow({\n        prismaClient,\n        customerName,\n        customerDisplayName,\n        projectId,\n        business,\n        ubos,\n      });\n    }\n  }\n};\n\nexport const createMockParentWithChildWorkflow = async ({\n  prismaClient,\n  customerName,\n  customerDisplayName,\n  projectId,\n  business,\n  ubos,\n}: {\n  prismaClient: PrismaClient;\n  customerName: string;\n  customerDisplayName: string;\n  projectId: string;\n  business: Workflow['business'];\n  ubos: Workflow['ubos'];\n}) => {\n  const parentRuntimeInformation = await generateParentRuntimeInformation({\n    businessId: business.id,\n    customerName,\n    customerDisplayName,\n    projectId,\n    business,\n    ubos,\n    prismaClient,\n  });\n  const businessWithWorkflowInformation = generateBusiness({\n    projectId: projectId,\n    ...business,\n    workflow: {\n      workflowDefinitionId: parentRuntimeInformation.workflowDefinitionId,\n      workflowDefinitionVersion: parentRuntimeInformation.workflowDefinitionVersion,\n      state: 'manual_review',\n      context: parentRuntimeInformation.context as unknown as Prisma.InputJsonValue,\n    },\n  });\n  const businessRecord = await prismaClient.business.create({\n    data: businessWithWorkflowInformation,\n    select: { workflowRuntimeData: true },\n  });\n\n  for (const ubo of ubos) {\n    const childWorkflowRuntimeInformation = generateChildRuntimeInformation({\n      customerName,\n      customerDisplayName,\n      projectId: projectId,\n      parentWorkflowId: businessRecord.workflowRuntimeData[0]!.id,\n      ubo,\n    });\n    const endUserWithWorkflowInformation = generateEndUser({\n      id: ubo.id,\n      workflow: {\n        workflowDefinitionId: childWorkflowRuntimeInformation.workflowDefinitionId,\n        workflowDefinitionVersion: childWorkflowRuntimeInformation.workflowDefinitionVersion,\n        context: childWorkflowRuntimeInformation.context as unknown as Prisma.InputJsonValue,\n        parentRuntimeId: businessRecord.workflowRuntimeData[0]!.id,\n        state: 'manual_review',\n      },\n      projectId: projectId,\n    });\n    await prismaClient.endUser.create({ data: endUserWithWorkflowInformation });\n    childWorkflowRuntimeInformation.context.documents[0]!.pages.forEach(async childPage => {\n      await prismaClient.file.create({\n        data: {\n          id: childPage.ballerineFileId,\n          userId: faker.datatype.uuid(),\n          uri: childPage.uri,\n          fileNameOnDisk: childPage.uri,\n          projectId: projectId,\n        },\n      });\n    });\n  }\n};\n\nexport const generateChildRuntimeInformation = ({\n  ubo,\n  customerName,\n  customerDisplayName,\n  projectId,\n  parentWorkflowId,\n}: {\n  customerName: string;\n  customerDisplayName: string;\n  projectId: string;\n  parentWorkflowId: string;\n  ubo: Workflow['ubos'][number];\n}) => {\n  return {\n    workflowDefinitionId: 'kyc_email_session_example',\n    workflowDefinitionVersion: 1,\n    context: createKycRuntime({\n      customerName: customerName,\n      ubo: ubo,\n      customerDisplayName,\n    }),\n    state: 'kyc_manual_review',\n    status: WorkflowRuntimeDataStatus.active,\n    createdAt: faker.date.recent(2),\n    updatedAt: faker.date.recent(2),\n    createdBy: 'SYSTEM',\n    resolvedAt: null,\n    config: {\n      callbackResult: {\n        deliverEvent: 'KYC_DONE',\n        transformers: [{ mapping: '{data: @}', transformer: 'jmespath' }],\n      },\n    },\n    parentRuntimeDataId: parentWorkflowId,\n    projectId: projectId,\n  };\n};\n\nexport const generateParentRuntimeInformation = async ({\n  businessId,\n  customerName,\n  customerDisplayName,\n  projectId,\n  business,\n  ubos,\n  prismaClient,\n}: {\n  businessId: string;\n  customerName: string;\n  customerDisplayName: string;\n  projectId: string;\n  business: Workflow['business'];\n  ubos: Workflow['ubos'];\n  prismaClient: PrismaClient;\n}) => {\n  return {\n    businessId: businessId,\n    workflowDefinitionId: 'kyb_parent_kyc_session_example',\n    workflowDefinitionVersion: 1,\n    context: await generateParentRuntimeContext({\n      customerName,\n      customerDisplayName,\n      business,\n      ubos,\n      projectId,\n      prismaClient,\n    }),\n    state: 'manual_review',\n    status: WorkflowRuntimeDataStatus.active,\n    createdAt: faker.date.recent(2),\n    updatedAt: faker.date.recent(2),\n    createdBy: 'SYSTEM',\n    resolvedAt: null,\n    config: {\n      childCallbackResults: [\n        {\n          definitionId: 'kyc_email_session_example',\n          deliverEvent: 'KYC_RESPONDED',\n          transformers: [\n            {\n              mapping:\n                '{childEntity: entity.data, vendorResult: pluginsOutput.kyc_session.kyc_session_1.result}',\n              transformer: 'jmespath',\n            },\n          ],\n          persistenceStates: ['kyc_manual_review'],\n        },\n      ],\n    },\n    projectId: projectId,\n  };\n};\n\nexport const createKycRuntime = ({\n  customerName,\n  customerDisplayName,\n  ubo,\n}: {\n  customerName: string;\n  customerDisplayName: string;\n  ubo: Workflow['ubos'][number];\n}) => ({\n  entity: {\n    id: ubo.id,\n    data: {\n      firstName: ubo.firstName,\n      lastName: ubo.lastName,\n      email: ubo.email,\n      dateOfBirth: ubo.dateOfBirth.toISOString(),\n      additionalInfo: {\n        title: ubo.title,\n        companyName: customerName,\n        customerCompany: customerDisplayName,\n      },\n    },\n    type: 'individual',\n  },\n  documents: [\n    {\n      id: faker.datatype.uuid(),\n      type: 'identification_document',\n      pages: [\n        {\n          uri: ubo.selfie,\n          type: 'png',\n          metadata: {\n            side: 'face',\n          },\n          provider: 'file-system',\n          ballerineFileId: faker.random.alphaNumeric(20),\n        },\n        {\n          uri: ubo.passport.front,\n          type: 'png',\n          metadata: {\n            side: 'front',\n          },\n          provider: 'file-system',\n          ballerineFileId: faker.random.alphaNumeric(20),\n        },\n        ...(ubo.passport.back\n          ? [\n              {\n                uri: ubo.passport.back,\n                type: 'png',\n                metadata: {\n                  side: 'back',\n                },\n                provider: 'base64',\n                ballerineFileId: faker.random.alphaNumeric(20),\n              },\n            ]\n          : []),\n      ],\n      issuer: {\n        city: null,\n        name: null,\n        country: ubo.passport.issuerCountryCode,\n        issuingVersion: null,\n        additionalInfo: {\n          validFrom: faker.date.past().toISOString(),\n          validUntil: faker.date.future().toISOString(),\n          firstIssue: null,\n        },\n      },\n      category: 'passport',\n      properties: {\n        idNumber: ubo.nationalId,\n        validFrom: faker.date.past().toISOString(),\n        expiryDate: faker.date.future().toISOString(),\n        firstIssue: null,\n        validUntil: faker.date.future().toISOString(),\n      },\n    },\n  ],\n  pluginsOutput: {\n    kyc_session: {\n      kyc_session_1: {\n        type: 'kyc',\n        result: {\n          aml: createAmlData({ ubo }),\n          entity: {\n            data: {\n              firstName: ubo.firstName,\n              lastName: ubo.lastName,\n              nationalId: ubo.nationalId,\n              dateOfBirth: ubo.dateOfBirth.toISOString().split('T')[0],\n              additionalInfo: {\n                gender: ubo.gender,\n                addresses: [],\n                nationality: ubo.nationality,\n                yearOfBirth: ubo.dateOfBirth.getFullYear(),\n                placeOfBirth: null,\n              },\n            },\n            type: 'individual',\n          },\n          decision: {\n            status: ubo.decision,\n            riskLabels: [],\n            decisionReason: ubo.decisionReason,\n          },\n          metadata: {\n            id: faker.datatype.uuid(),\n            url: faker.internet.url(),\n          },\n        },\n        vendor: 'veriff',\n      },\n    },\n  },\n  workflowRuntimeId: faker.datatype.uuid(),\n});\n\nconst createAmlData = ({ ubo }: { ubo: Workflow['ubos'][number] }) => {\n  if (!ubo.withAml) {\n    return {\n      hits: [],\n      endUserId: ubo.id,\n      matchStatus: 'no_match',\n    };\n  }\n\n  return {\n    attemptId: faker.datatype.uuid(),\n    vendorData: '123123-my-vendor-data',\n    checkType: 'initial_result',\n    matchStatus: 'possible_match',\n    searchTerm: {\n      name: `${ubo.firstName} ${ubo.lastName}`,\n      year: ubo.dateOfBirth.getFullYear(),\n    },\n    totalHits: 1,\n    createdAt: faker.date.recent().toISOString(),\n    hits: [\n      {\n        aka: [`${ubo.lastName} ${ubo.firstName}`],\n        countries: [faker.address.country()],\n        matchTypes: [faker.helpers.arrayElement(['year_of_birth', 'full_name', 'last_name'])],\n        dateOfBirth: ubo.dateOfBirth.toISOString().split('T')[0],\n        dateOfDeath: null,\n        matchedName: `${ubo.firstName} ${ubo.lastName}`,\n        listingsRelatedToMatch: {\n          pep: [],\n          warnings: [],\n          sanctions: [\n            {\n              sourceUrl:\n                'http://www.treasury.gov/resource-center/sanctions/SDN-List/Pages/default.aspx',\n              sourceName: 'OFAC SDN List',\n            },\n          ],\n          fitnessProbity: [],\n          adverseMedia: [],\n        },\n      },\n    ],\n  };\n};\n\nconst generateParentRuntimeContext = async ({\n  customerName,\n  customerDisplayName,\n  ubos,\n  business,\n  prismaClient,\n  projectId,\n}: {\n  customerName: string;\n  customerDisplayName: string;\n  ubos: Workflow['ubos'];\n  business: Workflow['business'];\n  prismaClient: PrismaClient;\n  projectId: string;\n}) => {\n  const documents = [\n    {\n      id: faker.datatype.uuid(),\n      type: 'bank_statement',\n      pages: [\n        {\n          uri: business.bankStatement,\n          type: 'png',\n          metadata: { side: 'front', pageNumber: '1' },\n          provider: 'http',\n          ballerineFileId: faker.random.alphaNumeric(20),\n        },\n      ],\n      issuer: {\n        country: 'GH',\n      },\n      version: '1',\n      category: 'proof_of_bank_account',\n      decision: {\n        status: '',\n        revisionReason: '',\n        rejectionReason: '',\n      },\n      properties: {\n        name: business.bankInformation.bankName,\n        country: business.bankInformation.country,\n        currency: business.bankInformation.currency,\n        holderName: business.bankInformation.holder,\n        accountNumber: business.bankInformation.account,\n      },\n      issuingVersion: 1,\n    },\n    {\n      id: faker.datatype.uuid(),\n      type: 'shareholders',\n      pages: [\n        {\n          uri: business.companyStructure,\n          type: 'png',\n          metadata: { side: 'front', pageNumber: '1' },\n          provider: 'http',\n          ballerineFileId: faker.random.alphaNumeric(20),\n        },\n      ],\n      issuer: {\n        country: 'GH',\n      },\n      version: '1',\n      category: 'company_structure',\n      decision: {\n        status: '',\n        revisionReason: '',\n        rejectionReason: '',\n      },\n      properties: {},\n      issuingVersion: 1,\n    },\n    {\n      id: faker.datatype.uuid(),\n      type: 'certificate_of_incorporation',\n      pages: [\n        {\n          uri: business.registrationCertificate,\n          type: 'png',\n          metadata: { side: 'front', pageNumber: '1' },\n          provider: 'http',\n          ballerineFileId: faker.random.alphaNumeric(20),\n        },\n      ],\n      issuer: {\n        country: 'GH',\n      },\n      version: '1',\n      category: 'registration_document',\n      decision: {\n        status: '',\n        revisionReason: '',\n        rejectionReason: '',\n      },\n      properties: {\n        vat: business.vatNumber,\n        state: business.addressComponents.region,\n        country: business.addressComponents.country,\n        companyName: business.name,\n        companyType: business.legalForm,\n        establishmentDate: business.dateOfIncorporation.toISOString().split('T')[0],\n      },\n      issuingVersion: 1,\n    },\n    {\n      id: faker.datatype.uuid(),\n      type: 'water_bill',\n      pages: [\n        {\n          uri: business.proofOfAddress,\n          type: 'png',\n          metadata: { side: 'front', pageNumber: '1' },\n          provider: 'http',\n          ballerineFileId: faker.random.alphaNumeric(20),\n        },\n      ],\n      issuer: {\n        country: 'GH',\n      },\n      version: '1',\n      category: 'proof_of_address',\n      decision: {\n        status: '',\n        revisionReason: '',\n        rejectionReason: '',\n      },\n      properties: {\n        userAddress: business.address,\n      },\n      issuingVersion: 1,\n    },\n  ] as const;\n\n  const companyDocuments = {\n    addressProof: '',\n    bankStatement: '',\n    companyStructure: '',\n    registrationCertificate: '',\n  };\n\n  const map = {\n    proof_of_address: 'addressProof',\n    proof_of_bank_account: 'bankStatement',\n    company_structure: 'companyStructure',\n    registration_document: 'registrationCertificate',\n  } as const;\n\n  for (const document of documents) {\n    for (const page of document.pages) {\n      const file = await prismaClient.file.create({\n        data: {\n          id: page.ballerineFileId,\n          userId: faker.datatype.uuid(),\n          uri: page.uri,\n          fileNameOnDisk: page.uri,\n          projectId: projectId,\n        },\n      });\n\n      companyDocuments[map[document.category]] = file.id;\n    }\n  }\n\n  return {\n    entity: {\n      data: {\n        email: business.email,\n        address: business.address,\n        country: business.addressComponents.country,\n        website: business.website,\n        industry: business.industry,\n        legalForm: business.legalForm,\n        vatNumber: business.vatNumber,\n        companyName: business.name,\n        dynamicInfo: {\n          ubos: {\n            check: true,\n            shareholders: [],\n          },\n          headquarters: {\n            city: business.addressComponents.locality,\n            phone: business.phoneNumber,\n            state: '',\n            street: business.addressComponents.streetAddress,\n            address: '',\n            country: business.addressComponents.country,\n            postalCode: business.addressComponents.postalCode,\n            streetNumber: '',\n          },\n          bankInformation: business.bankInformation,\n          companyActivity: { industry: business.industry, ...business.companyActivity },\n          companyDocuments: companyDocuments,\n          companyInformation: {\n            vat: business.vatNumber,\n            state: business.addressComponents.region,\n            companyName: business.name,\n            companyType: business.legalForm,\n            companyCountry: business.addressComponents.country,\n            registrationDate: business.dateOfIncorporation,\n            registrationNumber: business.registrationNumber,\n          },\n          personalInformation: {\n            name: {\n              firstName: ubos[0]!.firstName,\n              lastName: ubos[0]!.lastName,\n            },\n            title: ubos[0]!.title,\n            birthDate: ubos[0]!.dateOfBirth.toISOString(),\n            phoneNumber: '',\n            companyCheck: true,\n            personalPhoneNumber: ubos[0]!.phoneNumber,\n          },\n        },\n        phoneNumber: '',\n        additionalInfo: {\n          ubos: ubos.map(ubo => ({\n            entity: {\n              id: ubo.id,\n              data: {\n                firstName: ubo.firstName,\n                lastName: ubo.lastName,\n                email: ubo.email,\n                dateOfBirth: ubo.dateOfBirth.toISOString(),\n                additionalInfo: {\n                  title: ubo.title,\n                  companyName: customerName,\n                  customerCompany: customerDisplayName,\n                },\n              },\n              type: 'individual',\n            },\n          })),\n          mainRepresentative: {\n            firstName: ubos[0]!.firstName,\n            lastName: ubos[0]!.lastName,\n            title: ubos[0]!.title,\n            email: ubos[0]!.email,\n            phone: ubos[0]!.phoneNumber,\n            companyName: business.name,\n            dateOfBirth: ubos[0]!.dateOfBirth.toISOString(),\n          },\n        },\n        registrationNumber: business.registrationNumber,\n        dateOfIncorporation: business.dateOfIncorporation.toISOString(),\n        countryOfIncorporation: business.countryOfIncorporation,\n        taxIdentificationNumber: business.taxIdentificationNumber,\n      },\n      type: 'business',\n      endUserId: ubos[0]!.id,\n      ballerineEntityId: business.id,\n    },\n    documents,\n    pluginsOutput: {\n      open_corporates: {\n        companyNumber: business.registrationNumber,\n        registeredAddress: business.addressComponents,\n        identifiers: [],\n        registeredAddressInFull: business.address,\n        name: business.name,\n        incorporationDate: business.dateOfIncorporation.toISOString(),\n        source: {\n          url: faker.internet.url(),\n          retrievedAt: faker.date.recent().toISOString(),\n          publisher: 'Cartwright - Nikolaus',\n        },\n        officers: [],\n        previousNames: [],\n        isInactive: false,\n        agentName: null,\n        industries: [],\n        companyType: business.legalForm,\n        registryUrl: faker.internet.url(),\n        numberOfEmployees: business.numberOfEmployees,\n        jurisdictionCode: business.jurisdictionCode,\n        isBranch: false,\n        dissolutionDate: null,\n        branchStatus: null,\n        currentStatus: 'Active',\n        alternativeNames: [],\n      },\n    },\n    childWorkflows: {\n      kyc_email_session_example: Object.fromEntries(\n        ubos.map(ubo => [\n          faker.datatype.uuid(),\n          {\n            result: {\n              childEntity: {\n                firstName: ubo.firstName,\n                lastName: ubo.lastName,\n                email: ubo.email,\n                dateOfBirth: ubo.dateOfBirth.toISOString(),\n                additionalInfo: {\n                  title: ubo.title,\n                  companyName: customerName,\n                  customerCompany: customerDisplayName,\n                },\n              },\n              vendorResult: {\n                aml: createAmlData({ ubo }),\n                entity: {\n                  data: {\n                    firstName: ubo.firstName,\n                    lastName: ubo.lastName,\n                    nationalId: ubo.nationalId,\n                    dateOfBirth: ubo.dateOfBirth.toISOString().split('T')[0],\n                    additionalInfo: {\n                      gender: ubo.gender,\n                      addresses: [],\n                      nationality: ubo.nationality,\n                      yearOfBirth: ubo.dateOfBirth.getFullYear(),\n                      placeOfBirth: null,\n                    },\n                  },\n                  type: 'individual',\n                },\n                decision: {\n                  status: ubo.decision,\n                  riskLabels: [],\n                  decisionReason: ubo.decisionReason,\n                },\n                metadata: {\n                  id: faker.datatype.uuid(),\n                  url: faker.internet.url(),\n                },\n              },\n            },\n            status: 'active',\n            entityId: ubo.id,\n          },\n        ]),\n      ),\n    },\n    workflowRuntimeId: faker.datatype.uuid(),\n  };\n};\n"]}